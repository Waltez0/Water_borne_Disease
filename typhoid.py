# -*- coding: utf-8 -*-
"""Typhoid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15YLuatRGXmYIlF23o69mKlIZzcnoAeDq
"""
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import random
import os
import pickle
import time
from IPython.core.debugger import set_trace
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LassoCV
from sklearn import svm
from sklearn.svm import SVC
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import plot_confusion_matrix
from sklearn.model_selection import GridSearchCV

from faker import Faker
fake = Faker()

def faker_categorical(num=1, seed=None):
  np.random.seed(seed)
  fake.seed_instance(seed)

  output = [
            {
            "Fever": np.random.choice (["Yes","No"], p=[0.2, 0.8]),  
            "LooseStool": np.random.choice (["Yes","No"], p=[0.6, 0.4]),  
            "AbdominalPain": np.random.choice (["Yes","No"], p=[0.6, 0.4]),
            "Typhoid": np.random.choice (["Yes","No"], p=[0.2, 0.8]),
            "Fatigue": np.random.choice (["Yes","No"], p=[0.2, 0.8]),          
            }  
      for x in range (num)
  ]
  return output

data_df = pd.DataFrame(faker_categorical(num=300, seed=0))
data_df

nominal = ['AbdominalPain', 'Fever', 'Fatigue','Typhoid','LooseStool']

nominal2 = pd.concat([pd.get_dummies(data_df[nominal]),data_df],axis=1) 
nominal2.drop(nominal,axis=1,inplace=True)
nominal2

nominal2 = nominal2.drop(['AbdominalPain_No','Fever_No','Fatigue_No','Typhoid_No','LooseStool_No'], axis=1)
nominal2

nominal2.columns

feature_df = nominal2[[ 'AbdominalPain_Yes', 'Fever_Yes', 'Fatigue_Yes', 'LooseStool_Yes'
]]

X = np.asarray(feature_df)
y = np.asarray(nominal2['Typhoid_Yes'])

y[0:5]

X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4 )

clas = svm.SVC(kernel='linear', gamma='auto', C=5)
clas.fit(X_train, y_train)
y_predict = clas.predict(X_test)

